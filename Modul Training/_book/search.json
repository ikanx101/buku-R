[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro To R - Volume 4",
    "section": "",
    "text": "Kata Pengantar\nSudah dua tahun sejak saya mempublikasikan modul training Intro to R - Volume 3 di kalangan internal Nutrifood dan ITB. Ada berbagai tanggapan yang saya terima dan semuanya memiliki sentimen positif.\nSejak saat itu banyak perubahan dan perkembangan dalam dunia data sains, termasuk pada R, misalnya:\n\nBerubahnya haluan R Studio menjadi Posit. Akibatnya Posit kini tak hanya bisa digunakan oleh useR tapi juga oleh pawang ular.\nMunculnya Quarto sebagai calon penerus R Markdown dan libraries sejenisnya.\nPenerapan generative AI yang semakin meluas, termasuk penggunaan Hugging Face sebagai marketplace untuk model-model AI.\nPenggunaan meta heuristic optimization algorithm untuk model reinforce learning.\n\nOleh karena itu, saya mencoba meng-update modul training ini agar tetap relevan.\nIkang Fadhli.\nikanx101.com",
    "crumbs": [
      "Kata Pengantar"
    ]
  },
  {
    "objectID": "1 how to.html",
    "href": "1 how to.html",
    "title": "Cara Membaca dan Menggunakan Modul Ini",
    "section": "",
    "text": "Pada buku ini, disertakan penjelasan dan skrip R yang bisa dicoba langsung (executable).",
    "crumbs": [
      "Cara Membaca dan Menggunakan Modul Ini"
    ]
  },
  {
    "objectID": "2 why.html",
    "href": "2 why.html",
    "title": "Untuk apa saya belajar R?",
    "section": "",
    "text": "Di era digitalisasi ini, disadari atau tidak data tersebar di mana-mana. Data juga dihasilkan dengan volume yang besar dalam waktu singkat.\n\nAnaloginya seperti ada sungai yang memiliki arus yang deras dan kencang. Seperti itulah kondisi saat ini.\n\nTools analisa data klasik seperti Ms. Excel dan SPSS sudah tidak mampu lagi melakukan analisa big data yang seringkali berbentuk unstructured data.\nR tidak sendirian, ada juga software lain bernama Python. Keduanya digunakan untuk membuat algoritma artificial intelligence (bahasa keren dari machine learning. Bahasa kerennya dari computational science).",
    "crumbs": [
      "Untuk apa saya belajar __R__?"
    ]
  },
  {
    "objectID": "3 part 1.html",
    "href": "3 part 1.html",
    "title": "1  Pendahuluan",
    "section": "",
    "text": "1.1 Sejarah\nR Merupakan bahasa yang digunakan dalam komputasi statistik yang pertama kali dikembangkan oleh Ross Ihaka dan Robert Gentlement di University of Auckland New Zealand yang merupakan akronim dari nama depan kedua pembuatnya. Sebelum R dikenal ada S yang dikembangkan oleh John Chambers dan rekan-rekan dari Bell Laboratories yang memiliki fungsi yang sama untuk komputasi statistik. Hal yang membedakan antara keduanya adalah R merupakan sistem komputasi yang bersifat gratis.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pendahuluan</span>"
    ]
  },
  {
    "objectID": "3 part 1.html#fitur-dan-karakteristik",
    "href": "3 part 1.html#fitur-dan-karakteristik",
    "title": "1  Pendahuluan",
    "section": "1.2 Fitur dan Karakteristik",
    "text": "1.2 Fitur dan Karakteristik\nSama halnya dengan bahasa pemograman lainnya. Berbeda bahasa berarti berbeda peraturan / cara menulis code (algoritma). Tapi jangan khawatir, dengan memanfaatkan tidy principle di R, kita bisa menulis algoritma dengan mudah (bagi kita dan pembaca algoritmanya).\n\nOleh karena itu, menurut saya R menawarkan learning curve yang jauh lebih baik dibandingkan Python.\n\nBeberapa karakter dari R adalah sebagai berikut:\n\nBahasa R bersifat case sensitive. Setiap perbedaan cara penulisan (kapital vs non kapital) akan membedakan suatu objek. Contoh:\n\n\nx = 'Nutrifood'\ny = 'nutrifood'\nx == y\n\n[1] FALSE\n\n\n\nSegala sesuatu yang ada pada program R akan diangap sebagai objek. konsep objek ini sama dengan bahasa pemrograman berbasis objek yang lain seperti Java, C++, Python, dll. Perbedaannya adalah bahasa R relatif lebih sederhana dibandingkan bahasa pemrograman berbasis objek yang lain.\nInterpreted language atau script. Bahasa R memungkinkan pengguna untuk melakukan kerja pada R tanpa perlu melakukan compile menjadi executionable file (.exe).\nMendukung proses loop, decision making, dan menyediakan berbagai jenis operator (aritmatika, logika, dll).\nMendukung export dan import berbagai format file, seperti: .txt, .xlsx, .csv, .json, sql, dll.\nMudah ditingkatkan melalui penambahan fungsi atau library. Penambahan ini dapat dilakukan secara online melalui CRAN atau melalui sumber seperti github.\nMenyedikan berbagai fungsi untuk keperluan visualisasi data. Visualisasi data pada R dapat menggunakan library bawaan atau lainnya seperti ggplot2, ggvis, plotly, dll.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pendahuluan</span>"
    ]
  },
  {
    "objectID": "3 part 1.html#kelebihan-dan-kekurangan-r",
    "href": "3 part 1.html#kelebihan-dan-kekurangan-r",
    "title": "1  Pendahuluan",
    "section": "1.3 Kelebihan dan Kekurangan R",
    "text": "1.3 Kelebihan dan Kekurangan R\nSelain karena R dapat digunakan secara gratis terdapat kelebihan lain yang ditawarkan, antara lain:\n\nProtability, penggunaan software dapat digunakan kapanpun tanpa terikat oleh masa berakhirnya lisensi.\nMultiplatform, R bersifat Multiplatform Operating Systems, dimana R bisa dijalankan di OS manapun. Baik Windows, iOS, Linux, Raspbian, bahkan Android! Dengan fitur yang sama (tidak ada perbedaan fitur di semua OS).\nProgramable, pengguna dapat membuat fungsi dan metode baru atau mengembangkan modifikasi dari analisis statistika yang telah ada pada sistem R.\nFasiltas grafik yang lengkap.\n\nAdapun kekurangan dari R antara lain:\n\nPoint and Click GUI, interaksi utama dengan R bersifat CLI (Command Line Interface), walaupun saat ini telah dikembangkan library yang memungkinkan kita berinteraksi dengan R menggunakan GUI (Graphical User Interface) sederhana menggunakan library(R-Commander) yang memiliki fungsi yang terbatas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pendahuluan</span>"
    ]
  },
  {
    "objectID": "3 part 1.html#r-vs-r-studio",
    "href": "3 part 1.html#r-vs-r-studio",
    "title": "1  Pendahuluan",
    "section": "1.4 R vs R Studio",
    "text": "1.4 R vs R Studio\nPada dasarnya, software R bisa di-download dan di-install langsung dari situs CRAN. Software R ini bersifat CLI.\n\nBayangkan Anda membuka aplikasi notepad. Putih dan bersih kan?\n\nSeperti itulah software R.\nBagi Kamu yang kaget dan tidak terbiasa melihat tampilan yang intimidating seperti itu, Kamu bisa meng-install software R Studio (sekarang bernama POSIT). Sebuah software GUI yang bisa membuat R terlihat lebih user friendly. R Studio bisa di-download di sini.\n\nTapi tolong diperhatikan bahwa R Studio hanya tambahan tampilan dari R standar. Jadi Kamu tetap harus meng- install R yah!\n\n\nKelebihan R Studio antara lain:\n\nFree, kita bisa memilih versi gratis dari R Studio tanpa ada pengurangan fitur dasar dari R.\nR Studio Cloud, tersedia layanan cloud sehingga bisa diakses dan digunakan menggunakan browser di gadget manapun. Layanan cloud ini bisa diakses di sini dan dikoneksikan ke akun github Kamu.\nShiny Apps, kita bisa membuat apps berbasis web dari R. Apps ini bisa dijadikan dashboard atau mesin kalkulasi otomatis. Tergantung seberapa jauh Kamu membuat coding algoritmanya.\nQuarto, ini fitur terbaru yang paling saya sukai. Bahkan untuk menulis buku ini, saya menggunakan Quarto. Output files -nya beragam, mulai dari docx, pptx, pdf, html, md, dll.\n\nJadi, setelah membaca bagian ini pastikan Kamu sudah meng- install R dan R Studio yah. Jangan sampai terbalik urutan instalasinya!\n\n\nCara Lain Menggunakan R Studio\nAda satu alternatif cara bagi kita untuk menggunakan R Studio tanpa harus melakukan instalasi R dan R Studio, yakni dengan menggunakan Docker Container. Sebagai contoh, sejak Januari 2024, saya menggunakan laptop yang tak ter-install R dan R Studio. Saya bisa mengakses R Studio dengan cara install Docker dan memanggil container berisi R Studio.\nCara ini cukup ampuh untuk dijalankan di berbagai PC dan server sehingga kita bisa bekerja menembus batas spesifikasi komputer selama memiliki jaringan internet.\nSetelah install Docker, silakan run skrip berikut pada Docker:\ndocker run --rm -p 8888:8787 -d \\\n           -e USER=ikanx101 \\\n           -e PASSWORD=ikanx101 \\\n           -e USERID=1001 \\\n           -e GROUPID=1001 \\\n           -v ~:/home/ikanx101 ikanx101/r-custom:latest",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pendahuluan</span>"
    ]
  },
  {
    "objectID": "3 part 1.html#mengenal-operator-dasar",
    "href": "3 part 1.html#mengenal-operator-dasar",
    "title": "1  Pendahuluan",
    "section": "1.5 Mengenal operator dasar",
    "text": "1.5 Mengenal operator dasar\nBeberapa operator dasar di R antara lain:\n\n= atau &lt;-, digunakan untuk melakukan pendefinisian suatu objek. Contoh:\n\n\na = 10\nb &lt;- 3\na + b\n\n[1] 13\n\n\n\n' ' atau \" \", digunakan untuk menandai tipe variabel berupa character. Lalu apa beda penggunaan ' ' dengan \" \"? \" \" digunakan saat ' dibutuhkan dalam suatu character. Contoh:\n\n\na = 'saya hendak pergi ke pasar'\nb = \"i don't want to buy it\"\na\n\n[1] \"saya hendak pergi ke pasar\"\n\nb\n\n[1] \"i don't want to buy it\"\n\n\n\n==, &lt;, &gt;, &lt;=, atau &gt;=, digunakan untuk mengecek apakah dua variabel itu memiliki kesamaan atau tidak. Output dari operator ini adalah logic (TRUE or FALSE). Contoh:\n\n\na = 5\nb = 3\na == b\n\n[1] FALSE\n\na &gt; b\n\n[1] TRUE\n\n\n\n; atau , digunakan untuk memisahkan baris kode pada skrip algoritma. Contoh:\n\n\na = 5;b = 3;a*b\n\n[1] 15",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pendahuluan</span>"
    ]
  },
  {
    "objectID": "3 part 1.html#working-directory",
    "href": "3 part 1.html#working-directory",
    "title": "1  Pendahuluan",
    "section": "1.6 Working Directory",
    "text": "1.6 Working Directory\nApa itu working directory?\n\nWorking directory adalah folder path default untuk R melakukan import dan export data.\n\nUntuk mengetahui di mana working directory kita, bisa digunakan perintah:\n\ngetwd()\n\n[1] \"/home/ikanx101/buku-R/Modul Training\"\n\n\nSecara default, R menggunakan C:\\\\My Documents sebagai working directory.\n\n1.6.1 Bagaimana mengubah working directory?\nWorking directory bisa diubah sesuai kemauan kita memanfaatkan perintah setwd(), tanda dalam kurung diisi dengan folder path yang diinginkan.\n\nsetwd(\"~/buku-R/Modul Training\")\n\n\n\n1.6.2 Apa keuntungan mengubah-ubah working directory?\nPerubahan working directory akan sangat berguna saat kita ingin memgambil data dari folder path tertentu dan menyimpan hasil analisa kita ke folder path yang berbeda.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pendahuluan</span>"
    ]
  },
  {
    "objectID": "3 part 1.html#mengenal-packages-atau-library",
    "href": "3 part 1.html#mengenal-packages-atau-library",
    "title": "1  Pendahuluan",
    "section": "1.7 Mengenal packages atau library",
    "text": "1.7 Mengenal packages atau library\npackages atau library adalah sekumpulan fungsi yang telah dibuat dan dibakukan untuk kemudian disertakan di halaman web CRAN atau github. library bisa kita install dan gunakan dengan mudah.\nSeperti yang sudah saya infokan di bagian pendahuluan. Banyak orang atau komunitas yang mengembangkan berbagai macam library sehingga memudahkan kita untuk menyelesaikan masalah di data kita. Kita tidak perlu lagi membuat algoritma dari nol. Cukup memanfaatkan library yang tepat saja.\nBeberapa contoh library yang sering saya gunakan:\n\ndplyr, tidyr, janitor: data carpentry menggunakan tidy principle.\nggplot2: data visualization.\nrvest, RSelenium: web scraping.\ntidytext: text analysis.\nreshape2: data manipulation.\nreadxl, openxlsx: export dan import excel files.\nofficer: membuat Ms. Office files seperti excel, docx, dan powerpoint.\nexpss: SPSS di R.\n\n\n1.7.1 Instalasi Packages\nlibrary di R bisa di-install dengan mudah dengan menggunakan perintah install.packages('nama packages'). Tanda dalam kurung diisi character nama library. Bisa menggunakan \" \" atau ' '.\nProses instalasi library ini membutuhkan koneksi internet karena R akan otomatis terhubung ke dalam situs web CRAN. Setelah proses instalasi selesai, maka koneksi internet tidak diperlukan lagi (kecuali untuk melakukan web scraping).\nContoh:\ninstall.packages('readxl')\ninstall.packages(\"rvest\")\n\n\n1.7.2 Mengaktifkan Packages\nlibrary yang sudah di-install bisa diaktifkan dengan menggunakan perintah library(nama packages) tanpa menggunakan tanda \" \" atau ' '.\nPengaktifan library cukup dilakukan sekali saja di awal pengerjaan project (tidak perlu dilakukan berulang kali). Contoh:\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nBeberapa library saat diaktifkan akan menghasilkan pesan tertentu seperti di atas ini. Hal ini merupakan sesuatu yang normal terjadi.\n\n\n1.7.3 Serba-Serbi Tentang Packages\nUntuk beberapa library ada kemungkinan (kecil) ditemukan kasus saat mereka tidak kompatibel. Akibatnya beberapa fungsi perintah di library tersebut akan menjadi kacau.\nMisalnya pada saat kita memanggil library(tidyverse) dan library(plyr), maka perintah filter() yang dimiliki tidyverse akan tidak berjalan dengan baik.\nAda beberapa solusi yang bisa kita lakukan:\n\nSelalu mengaktifkan library sesuai dengan urutannya. Biasanya setiap kali kita mengaktifkan library akan muncul warnings mengenai kompatibilitas library tersebut dengan library lain.\nMenonaktikan library yang sudah tidak perlu digunakan dengan perintah:\n\ndetach(\"package:tidytext\", unload = TRUE)\n\nMemanggil library tanpa harus mengaktifkannya. Kita bisa melakukannya dengan menggunakan tanda nama packages::. Contoh:\n\nreshape2::melt(data)\n\n\n1.7.4 Help\nSetiap library yang telah di-install dan aktif disertai dengan fitur help yang berfungsi sebagai informasi kepada user. Jika kita ingin mengetahui bagaimana isi dari perintah suatu fungsi, kita bisa gunakan perintah help(nama fungsi) atau ?nama fungsi. Help akan muncul pada tab help di R Studio. Contoh:\n\nhelp(sum)\n\natau\n\n?sum\n\n\n\n1.7.5 Example\nSelain help, kita bisa melihat contoh pemakaian dari suatu fungsi di R dengan menggunakan perintah example(). Contoh:\n\nexample(sum)\n\n\nsum&gt; ## Pass a vector to sum, and it will add the elements together.\nsum&gt; sum(1:5)\n[1] 15\n\nsum&gt; ## Pass several numbers to sum, and it also adds the elements.\nsum&gt; sum(1, 2, 3, 4, 5)\n[1] 15\n\nsum&gt; ## In fact, you can pass vectors into several arguments, and everything gets added.\nsum&gt; sum(1:2, 3:5)\n[1] 15\n\nsum&gt; ## If there are missing values, the sum is unknown, i.e., also missing, ....\nsum&gt; sum(1:5, NA)\n[1] NA\n\nsum&gt; ## ... unless  we exclude missing values explicitly:\nsum&gt; sum(1:5, NA, na.rm = TRUE)\n[1] 15",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pendahuluan</span>"
    ]
  },
  {
    "objectID": "3 part 2.html",
    "href": "3 part 2.html",
    "title": "2  Mulai Bekerja dengan R",
    "section": "",
    "text": "2.1 Mengenal Data\nSebelum memulai bekerja dengan R, ada baiknya saya jelaskan dan ingatkan kembali beberapa hal penting terkait data. Dengan demikian, kita bisa memilih jenis analisa statistika apa yang tepat untuk tipe-tipe data yang berbeda.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Mulai Bekerja dengan __R__</span>"
    ]
  },
  {
    "objectID": "3 part 2.html#mengenal-data",
    "href": "3 part 2.html#mengenal-data",
    "title": "2  Mulai Bekerja dengan R",
    "section": "",
    "text": "2.1.1 Tipe Data (statistika)\nSecara statistika, berikut adalah pembagian data berdasarkan tipenya:\n\n\n\n\n\nflowchart LR\n  A[Data] --&gt; B(Kualitatif)\n  A --&gt; C(Kuantitatif)\n  B --&gt; D[Nominal]\n  B --&gt; E[Ordinal]\n  C --&gt; F[Diskrit]\n  C --&gt; G[Kontinu]\n\n\n\n\n\n\n\nData kualitatif: adalah data yang tidak bisa dilakukan operasi aritmatika (penjumlahan, pengurangan, pembagian, dan perkalian). Data seperti ini, kita akan sebut sebagai data kategorik.\n\nNominal; Representasi dari sesuatu. Contoh: gender, 1 saya tulis sebagai pria dan 2 saya tulis sebagai wanita.\nOrdinal; Urutan dari data menjadi penting. Contoh: skala likert 1 - 6.\n\nData kuantitatif: adalah data yang bisa dilakukan operasi aritmatika (penjumlahan, pengurangan, pembagian, dan perkalian). Data seperti ini, kita akan sebut sebagai data numerik.\n\nDiskrit; bilangan bulat (integer).\nKontinu; bilangan real (mengandung koma).\n\n\n\n\n2.1.2 Tipe Data di R\nDi R ada beberapa tipe data yang sering digunakan. Secara hierarki, bisa diurutkan sebagai berikut:\ncharacter &gt; numeric &gt; integer &gt; logical\nOke, saya coba jelaskan satu persatu yah:\n\ncharacter: merupakan tipe data berupa karakter atau string. Semua data bisa dilihat sebagai character. Oleh karena itu, secara hierarki tipe data ini ditempatkan di urutan paling atas. Namun, data tipe ini tidak bisa dilakukan operasi aritmatika yah.\nnumeric: merupakan tipe data angka berupa bilangan real. Kalau saya boleh bilang, tipe data ini mirip dengan data numerik di poin 2.1.1.\ninteger: merupakan tipe data angka berupa bilangan bulat. Sekilas mirip dengan tipe data diskrit di poin 2.1.1. Namun di beberapa kondisi, tipe data ini bisa dijadikan data kategorik sehingga kita bisa sebut tipenya menjadi factor.\nlogical: merupakan tipe data boolean. Hanya berisi TRUE atau FALSE. Tipe data ini sangat berguna saat kita melakukan if conditional, looping, atau membuat regex (reguler expression).\n\n\n\n2.1.3 Struktur Data di R\nAda beberapa bentuk struktur data di R, yakni:\n\nSingle value; satu objek yang berisi satu value saja.\nVector; kumpulan dari beberapa single value(s) yang menjadi satu objek. Bayangkan sebagai satu buah kolom di file Ms. Excel.\nData frame atau tibble; merupakan kumpulan dari beberapa vectors yang memiliki ukuran sama. Bayangkan sebagai satu tabel di Ms. Excel yang banyaknya baris di setiap kolom sama.\nList; merupakan bentuk struktur data yang sangat kompleks. Berisi multiple data dengan struktur bermacam-macam.\n\n\n\n2.1.4 Apa gunanya kita mengetahui jenis dan struktur data di R?\nBeberapa algoritma yang tersedia di library mengharuskan kita memiliki input yang ter-standar, baik dari segi jenis dan strukturnya.\nDengan mengetahui jenis dan struktur data, kita bisa lebih mudah bekerja dengan algoritma yang ada di library.\nContoh:\n\nAlgoritma analisa simple linear regression (lm()) memerlukan input berupa data.frame() dengan masing-masing variables yang ada di dalamnya berjenis numeric.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Mulai Bekerja dengan __R__</span>"
    ]
  },
  {
    "objectID": "3 part 2.html#tata-cara-memberikan-nama-object-atau-variabel",
    "href": "3 part 2.html#tata-cara-memberikan-nama-object-atau-variabel",
    "title": "2  Mulai Bekerja dengan R",
    "section": "2.2 Tata Cara Memberikan Nama Object atau Variabel",
    "text": "2.2 Tata Cara Memberikan Nama Object atau Variabel\nSetiap object atau variabel di R bisa diberikan nama sesuai dengan keinginan kita. Tidak ada aturan baku dalam memberikan nama.\n\nTapi, dengan memberikan nama yang tepat kita bisa bekerja dengan ebih cepat dan efisien. Berikut adalah tata cara pemberian nama yang akan membuat pekerjaan kita lebih efisien:\n\n\nSeragamkan kapital atau non kapital dari nama variabel kita. Jika menggunakan lowercase, maka harus konsisten di setiap data yang ada di environment R.\nHindari penggunaan spasi ” “. Jika memang tidak bisa dihindari, gunakan tanda”.” atau “_“.\n\nContoh: variabel tinggi badan akan lebih baik ditulis dalam bentuk tinggi.badan atau tinggi_badan.\nJika sudah terlanjur memiliki nama variabel yang tidak seragam atau mengandung spasi (biasanya terjadi saat kita meng- import data dari sumber lain seperti: excel), kita bisa merapikannya dengan otomatis dengan memanfaatkan library(janitor) fungsi make_clean_names() atau clean_names().",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Mulai Bekerja dengan __R__</span>"
    ]
  },
  {
    "objectID": "3 part 3.html",
    "href": "3 part 3.html",
    "title": "3  Memulai dengan R",
    "section": "",
    "text": "3.1 Fungsi Awal",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Memulai dengan __R__</span>"
    ]
  },
  {
    "objectID": "3 part 3.html#fungsi-awal",
    "href": "3 part 3.html#fungsi-awal",
    "title": "3  Memulai dengan R",
    "section": "",
    "text": "3.1.1 Pendefinisian object\nSetiap data yang akan kita masukkan ke dalam memori R, akan saya sebut sebagai object. Setiap object yang ingin dimasukkan ke dalam memori perlu didefinisikan terlebih dahulu menggunakan perintah = atau &lt;-.\nContoh:\nJika saya ingin mendefinisikan dua buah objects, yakni a dan b sebagai berikut:\n\na = 6\nb &lt;- 8\n\nMaka:\n\na\n\n[1] 6\n\nb\n\n[1] 8\n\n\n\n\n3.1.2 Operasi Aritmatika dan Matematika\nSetiap object yang sudah masuk ke dalam memori R sudah bisa dilakukan analisa atau dilakukan operasi aritmatika: +, -, /, dan * ATAU diberikan fungsi matematika seperti trigonometri, logaritmik, dan lain-lain.\nPada section 3.1.1 kita telah mendefinisikan objects a dan b, maka kita bisa lakukan perintah sebagai berikut:\n\na + b\n\n[1] 14\n\na / b\n\n[1] 0.75\n\nc = a * b\nc\n\n[1] 48\n\nsin(c)\n\n[1] -0.7682547\n\nlog(a+b/c)\n\n[1] 1.819158\n\n\n\n\n3.1.3 Operasi Relasi dan Logical (Boolean)\nPada section 1.5 poin 3, kita telah mengetahui operator relasi seperti ==, &gt;, &lt;, &lt;=, &gt;=, dan !=. Hasil dari operator relasi ini adalah logical value (TRUE atau FALSE).\nLogical value yang dihasilkan memiliki sifat sebagai berikut:\n\nTRUE, berarti benar. Bisa disingkat menjadi T. Tidak bisa ditulis dalam huruf kecil (harus kapital).\nFALSE, berarti salah. Bisa disingkat menjadi F. Tidak bisa ditulis dalam huruf kecil (harus kapital).\n\nOperator logical yang biasa digunakan di R antara lain:\n\n& menandakan AND\n| menandakan OR\n! menandakan NOT\n\nContoh:\nMisalkan saya memiliki dua pernyataan sebagai berikut:\n\npernyataan_1 = T\npernyataan_2 = F\n\nMaka:\n\n!pernyataan_1\n\n[1] FALSE\n\npernyataan_1 & pernyataan_2\n\n[1] FALSE\n\npernyataan_1 | pernyataan_2\n\n[1] TRUE\n\n\n\n\n3.1.4 If Conditional\nMungkin teman-teman bertanya-tanya:\n\nApa sih gunanya logical value dan logical operator? Logical value merupakan unsur utama saat kita hendak membuat fungsi conditional dan looping. Masih ingat fungsi di Ms. Excel untuk membuat conditional? Nah, mirip pengerjaannya di R.\n\nSetidaknya ada tiga fungsi conditional di R, yakni:\n\nifelse(): bawaan dari package base.\nif_else(): fungsi dari package dplyr (perlu di- install dulu package-nya).\ncase_when(): fungsi dari package dplyr (perlu di- install dulu package-nya).\n\nApa perbedaan ketiganya?\nifelse() dengan if_else() berdasarkan pengalaman saya tidak ada perbedaannya. Selama ini saya cukup memilih salah satu saja.\nSedangkan case_when() digunakan bersamaan dengan pipe %&gt;% pada saat tidying data. Berguna saat kita hendak mem- vector-kan conditional.\n\nMasih bingung? Saya akan bahas fungsi ifelse() dulu yah. Pembahasan mengenai case_when() akan saya jelaskan pada section khusus mengenai tidyverse.\n\nContoh paling mudah untuk conditional seperti ini:\nMisalkan saya memiliki dua buah objects, yakni a dan b.\n\na = 10\nb = 10 + sin(pi/3)\n\nMaka:\n\nifelse(a &lt; b, 'hari ini cerah','hari ini mendung')\n\n[1] \"hari ini cerah\"\n\nifelse(a == b, 'sama-sama','tidak bersama')\n\n[1] \"tidak bersama\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Memulai dengan __R__</span>"
    ]
  },
  {
    "objectID": "3 part 3.html#bekerja-dengan-data",
    "href": "3 part 3.html#bekerja-dengan-data",
    "title": "3  Memulai dengan R",
    "section": "3.2 Bekerja dengan data",
    "text": "3.2 Bekerja dengan data\nPada section 2.1.2 telah dijelaskan beberapa struktur data di R, sekarang kita akan melihat bagaimana bentuk real-nya di R.\nUntuk data berbentuk list, akan saya jelaskan sekalian bersamaan dengan materi tidyverse yah.\n\n3.2.1 Single Value\nContoh:\n\na = 100\nx = 50\nz = 'Indonesia'\n\n\n\n3.2.2 Vector\nVector didefinisikan dengan menggunakan perintah c(); merupakan\nContoh:\n\ntinggi_badan = c(164,149,180,184,153,90,139,199,186,158,197)\ntinggi_badan\n\n [1] 164 149 180 184 153  90 139 199 186 158 197\n\n\n\n3.2.2.1 Elemen Vector\nAda yang sadar gak dengan tanda [1] setiap kali kita running suatu skrip di R.\nApa sih artinya?\nItu adalah tanda posisi pertama dari vector. Tanda [] digunakan untuk memanggil isi vector di posisi tertentu. Istilah kerennya adalah subset dari suatu vector.\nContoh:\n\ntinggi_badan[1]\n\n[1] 164\n\ntinggi_badan[7]\n\n[1] 139\n\ntinggi_badan[10]\n\n[1] 158\n\ntinggi_badan[3:5]\n\n[1] 180 184 153\n\ntinggi_badan[c(1,7,10)]\n\n[1] 164 139 158\n\ntinggi_badan[-c(1,7,10)] #pengecualian\n\n[1] 149 180 184 153  90 199 186 197\n\n\n\n\n3.2.2.2 Operasi Aritmatika Pada Vector\nVector yang berupa numerik bisa dilakukan operasi aritmatik.\nContoh:\n\nstatus = (tinggi_badan - 100)/50\nstatus\n\n [1]  1.28  0.98  1.60  1.68  1.06 -0.20  0.78  1.98  1.72  1.16  1.94\n\n\n\n\n3.2.2.3 Fungsi Pada Vector\nVector berupa numerik juga bisa dikenakan fungsi perhitungan seperti:\n\nmax(tinggi_badan) # memperoleh nilai maksimum x\n\n[1] 199\n\nmin(tinggi_badan) # memperoleh nilai minimum x\n\n[1] 90\n\nrange(tinggi_badan) # memperoleh range vektor x\n\n[1]  90 199\n\nlength(tinggi_badan) # memperoleh jumlah vektor x\n\n[1] 11\n\nsum(tinggi_badan) # memperoleh total penjumlahan vektor x\n\n[1] 1799\n\nmean(tinggi_badan) # memperoleh nilai mean vektor x\n\n[1] 163.5455\n\nsd(tinggi_badan) # standar deviasi vektor x\n\n[1] 31.5194\n\nvar(tinggi_badan) # varian vektor x\n\n[1] 993.4727\n\nsort(tinggi_badan) # mengurutkan elemen vektor x dari yang terbesar\n\n [1]  90 139 149 153 158 164 180 184 186 197 199\n\n\n\n\n3.2.2.4 Generating Sequences\nSequences atau deret bisa kita bangun menggunakan R dengan dua cara:\n\nMenggunakan :.\nMenggunakan fungsi seq().\n\nContoh:\n\nnomor_1 = c(1:10)\nnomor_1\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n# perintah untuk menghitun gcumulative sum\ncumsum(nomor_1)\n\n [1]  1  3  6 10 15 21 28 36 45 55\n\nnomor_2 = seq(1,10,0.4) # generating sequence dari 1 hingga 10 dengan jeda 0.4\nnomor_2\n\n [1] 1.0 1.4 1.8 2.2 2.6 3.0 3.4 3.8 4.2 4.6 5.0 5.4 5.8 6.2 6.6 7.0 7.4 7.8 8.2\n[20] 8.6 9.0 9.4 9.8\n\n\n\nApa sih gunanya deret? Percayalah, suatu saat nanti deret bisa digunakan untuk membantu perhitungan atau analisa kita. Seolah-olah berperan sebagai katalis pada reaksi kimia.\n\n\n\n3.2.2.5 Random sampling dari suatu vector\nAda suatu masa saat kita membutuhkan untuk mengambil sampel (mengambil subset) dari suatu vector secara acak. Kita bisa menggunakan fungsi sample().\nContoh:\nKita memiliki data variabel nama_orang berisi 20 nama orang. Kita hanya ingin memilih 3 nama orang saja secara acak. Bagaimana caranya?\n\nnama_orang = randomNames::randomNames(20)\nnama_orang\n\n [1] \"Gunaydin, Amanda\"    \"Farley, Cassidy\"     \"al-Ameen, Nisma\"    \n [4] \"Linzy, Jasmine\"      \"Madera, Anthony\"     \"al-Mansouri, Mufeed\"\n [7] \"Edmunds, Cameron\"    \"Vera, Gerald\"        \"Crowe, Kevin\"       \n[10] \"Gerardo, Guillermo\"  \"Pham, Paxton\"        \"Karp, Cleevens\"     \n[13] \"al-Ghazi, Laila\"     \"English, Dylon\"      \"al-Salame, Farha\"   \n[16] \"Staffieri, Joshua\"   \"Liu, Jimmy\"          \"al-Ismail, Haamida\" \n[19] \"Swimmer, Alicia\"     \"Krug-Byrd, Trayvon\" \n\nsample(nama_orang,3,replace = F)\n\n[1] \"al-Mansouri, Mufeed\" \"Swimmer, Alicia\"     \"Farley, Cassidy\"    \n\n\nreplace = F digunakan saat kita tidak ingin ada pemilihan yang berulang. Sedangkan replace = T digunakan saat diperbolehkan hasil pemilihan berulang. Coba run sendiri yah.\nPerintah sample() ini akan sangat berguna saat kita hendak menggunakan prinsip simulasi Monte Carlo.\n\n\n3.2.2.6 Repeat\nAdakalanya kita hendak melakukan pengulangan yang simpel. Instead of using looping, kita bisa menggunakan perintah rep(). Misalkan:\n\nrep('belajar R',3)\n\n[1] \"belajar R\" \"belajar R\" \"belajar R\"\n\nrep(c(4:8),10)\n\n [1] 4 5 6 7 8 4 5 6 7 8 4 5 6 7 8 4 5 6 7 8 4 5 6 7 8 4 5 6 7 8 4 5 6 7 8 4 5 6\n[39] 7 8 4 5 6 7 8 4 5 6 7 8\n\ntinggi_badan = c(120,132,142,90)\nrep(mean(tinggi_badan),4)\n\n[1] 121 121 121 121\n\n\nJadi perintah rep() tidak hanya bisa untuk mengulang suatu single variabel atau vector saja tapi bisa digunakan untuk mengulang suatu fungsi.\nApa perbedaan dengan fungsi repeat()? Fungsi repeat() biasanya digunakan dalam looping dan baru akan berhenti saat diberikan perintah break.\n\n\n\n3.2.3 Tibble atau Data Frame\nTibble atau data frame adalah struktur data di R berupa tabel. Analogi sederhananya adalah mirip dengan tabel di Ms. Excel files.\nData frame bisa dibentuk dari beberapa vector yang memiliki length() yang sama. Contohnya berikut ini:\nKita akan membuat data frame dari 4 buah vector, yakni: id, nama, dan tinggi_badan.\n\nid = c(1:10)\nnama = randomNames::randomNames(10,gender = 0,which.names = 'first')\ntinggi_badan = sample(c(150:199),10,replace = F)\nabsensi = data.frame(id,nama,tinggi_badan)\n\nHasilnya seperti ini:\n\nabsensi\n\n   id      nama tinggi_badan\n1   1   Brendan          157\n2   2     Aaish          158\n3   3       Max          172\n4   4    Steven          191\n5   5      Ibsa          180\n6   6 Nathanial          150\n7   7     Alton          170\n8   8  Nicholas          152\n9   9    Skyler          175\n10 10   Markice          195\n\n\nBentuk data frame kelak akan menjadi primadona dalam setiap analisa yang digunakan di R. Nanti saat kita belajar data carpentry menggunakan tidyverse, struktur data frame mudah dimanipulasi dengan piping operator: %&gt;%.\n\n\n3.2.4 Missing values NA\nMissing values adalah suatu nilai yang kosong pada suatu data. Kosong berarti tidak berisi data apapun. Bedakan dengan nilai 0 yah!\n\nNA tidak akan diikutsertakan dalam perhitungan sedangkan 0 diikutsertakan. Di R, nilai NA pada data numerik akan membuat error setiap kali dihitung.\n\nContoh:\n\ndata_1 = c(3,5,0,6,8,3)\nmean(data_1)\n\n[1] 4.166667\n\n\nBerikut adalah contoh saat ada data berisi NA, maka data tersebut tidak akan bisa dihitung:\n\ndata_2 = c(3,5,NA,6,8,3)\nmean(data_2)\n\n[1] NA\n\n\nBagaimana cara mengecek keberadaan NA di data kita?\nKita bisa menggunakan fungsi is.na(). Output dari fungsi ini adalah boolean variable berupa TRUE atau FALSE.\nContoh: mengecek apakah ada NA di data_2.\n\nis.na(data_2)\n\n[1] FALSE FALSE  TRUE FALSE FALSE FALSE\n\n\nContoh: membuat tabulasi dari function is.na().\n\ntable(is.na(data_2))\n\n\nFALSE  TRUE \n    5     1 \n\n\nContoh: menghitung seberapa banyak yang TRUE.\n\nsum(is.na(data_2))\n\n[1] 1\n\n\nContoh: mengecek apakah ada data yang TIDAK NA di data_2.\n\n!is.na(data_2)\n\n[1]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Memulai dengan __R__</span>"
    ]
  },
  {
    "objectID": "3 part 3.html#beberapa-fungsi-yang-berguna",
    "href": "3 part 3.html#beberapa-fungsi-yang-berguna",
    "title": "3  Memulai dengan R",
    "section": "3.3 Beberapa Fungsi yang Berguna",
    "text": "3.3 Beberapa Fungsi yang Berguna\n\n3.3.1 Paste\n\nApakah kalian mengetahui fungsi bernama CONCATENATE di Ms. Excel? Fungsi paste() mirip penggunaannya dengan perintah CONCATENATE, yakni menggabungkan beberapa data menjadi satu.\n\nContoh: membuat vector berisi nama_toko yang berisi urutan nama toko.\n\nnama_toko = paste('toko ke',c(1:10),sep='-')\nnama_toko\n\n [1] \"toko ke-1\"  \"toko ke-2\"  \"toko ke-3\"  \"toko ke-4\"  \"toko ke-5\" \n [6] \"toko ke-6\"  \"toko ke-7\"  \"toko ke-8\"  \"toko ke-9\"  \"toko ke-10\"\n\n\nContoh: membuat vector dari nama_toko yang sudah pernah dibuat sebelumnya dengan rules 5 toko pertama dari Bandung dan 5 toko selanjutnya dari Bekasi.\n\nnama_toko = paste(nama_toko,rep(c('Bandung','Bekasi'),5))\nnama_toko\n\n [1] \"toko ke-1 Bandung\" \"toko ke-2 Bekasi\"  \"toko ke-3 Bandung\"\n [4] \"toko ke-4 Bekasi\"  \"toko ke-5 Bandung\" \"toko ke-6 Bekasi\" \n [7] \"toko ke-7 Bandung\" \"toko ke-8 Bekasi\"  \"toko ke-9 Bandung\"\n[10] \"toko ke-10 Bekasi\"\n\n\nsep = berguna untuk mendefinisikan separator apa yang hendak digunakan. Secara default, separator yang digunakan adalah spasi.\nCoba kalian ganti sendiri bagian separator-nya.\nSelain itu, kita uga bisa menggabungkan vector menjadi satu single object sebagai berikut:\n\ngabung = paste(nama_toko,collapse = \";\")\ngabung\n\n[1] \"toko ke-1 Bandung;toko ke-2 Bekasi;toko ke-3 Bandung;toko ke-4 Bekasi;toko ke-5 Bandung;toko ke-6 Bekasi;toko ke-7 Bandung;toko ke-8 Bekasi;toko ke-9 Bandung;toko ke-10 Bekasi\"\n\n\n\n\n3.3.2 Print\nFungsi print() digunakan untuk menampilkan data ke layar. Biasanya digunakan pada proses looping agar hasil iterasi dapat tampil ke layar.\n\nprint(nama_toko)\n\n [1] \"toko ke-1 Bandung\" \"toko ke-2 Bekasi\"  \"toko ke-3 Bandung\"\n [4] \"toko ke-4 Bekasi\"  \"toko ke-5 Bandung\" \"toko ke-6 Bekasi\" \n [7] \"toko ke-7 Bandung\" \"toko ke-8 Bekasi\"  \"toko ke-9 Bandung\"\n[10] \"toko ke-10 Bekasi\"\n\n\n\n\n3.3.3 str\nFungsi str() digunakan untuk melihat tipe dan struktur object yang ada di R. Sebagai contoh, kita akan pakai data absensi dari section 3.2.3.\n\nstr(absensi)\n\n'data.frame':   10 obs. of  3 variables:\n $ id          : int  1 2 3 4 5 6 7 8 9 10\n $ nama        : chr  \"Brendan\" \"Aaish\" \"Max\" \"Steven\" ...\n $ tinggi_badan: int  157 158 172 191 180 150 170 152 175 195\n\n\nTerlihat bahwa data absensi memiliki struktur data.frame dengan ada 3 variables dan 10 observations (baris data).\n\n\n3.3.4 Summary\nFungsi summary() digunakan untuk melihat statistik deskriptif dari suatu data (tergantung dari tipe datanya). Contoh:\n\nsummary(absensi$tinggi_badan)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  150.0   157.2   171.0   170.0   178.8   195.0 \n\n\n\n\n3.3.5 Class\nFungsi class() digunakan untuk melihat tipe atau struktur dari suatu data. Mirip dengan fungsi str(), tapi tidak sampai menampilkan dengan detail. Contoh:\n\nclass(absensi)\n\n[1] \"data.frame\"\n\nclass(absensi$tinggi_badan)\n\n[1] \"integer\"\n\n\n\n\n3.3.6 View\nFungsi View() (dengan huruf V kapital) digunakan untuk menampilkan dataset dalam pop-up windows.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Memulai dengan __R__</span>"
    ]
  },
  {
    "objectID": "3 part 3.html#looping",
    "href": "3 part 3.html#looping",
    "title": "3  Memulai dengan R",
    "section": "3.4 Looping",
    "text": "3.4 Looping\nLooping berarti pengulangan namun berbeda dengan repeat yang pernah kita bahas sebelumnya. Ada dua fungsi looping yang biasa digunakan, yakni: for() dan while(). Keduanya memiliki manfaat yang berbeda.\n\n3.4.1 For\nFungsi for() biasa dilakukan untuk melakukan looping dengan syarat iterasi yang didefinisikan terlebih dahulu. Jadi kita sudah mengetahui terlebih dahulu berapa kali kita akan melakukan looping.\nContoh:\n\nfor(i in 1:10){\n  print(paste('pertanyaan ke',i))\n}\n\n[1] \"pertanyaan ke 1\"\n[1] \"pertanyaan ke 2\"\n[1] \"pertanyaan ke 3\"\n[1] \"pertanyaan ke 4\"\n[1] \"pertanyaan ke 5\"\n[1] \"pertanyaan ke 6\"\n[1] \"pertanyaan ke 7\"\n[1] \"pertanyaan ke 8\"\n[1] \"pertanyaan ke 9\"\n[1] \"pertanyaan ke 10\"\n\n\nContoh:\n\nfor(i in 1:10){\n  i = 1/i\n  print(round(i,3))\n}\n\n[1] 1\n[1] 0.5\n[1] 0.333\n[1] 0.25\n[1] 0.2\n[1] 0.167\n[1] 0.143\n[1] 0.125\n[1] 0.111\n[1] 0.1\n\n\n\n\n3.4.2 While\nFungsi while() digunakan untuk melakukan looping dengan sampai syarat iterasi terpenuhi. Jadi kita belum mengetahui berapa kali kita akan melakukan looping.\nContoh: misalkan dalam satu ruangan ada 100 orang. Saya akan membagi mereka menjadi kelompok - kelompok berisi 1 sampai 5 orang. Kira - kira ada berapa banyak kelompok yang bisa saya dapatkan?\nCaranya, kita set dulu kondisi awalnya.\n\norang = 100\ni = 0 # berapa banyak kelompok? awalnya nol dulu\n\nLalu kita buat iterasi dengan while(). Yakni mengurangi secara berkala 100 orang dengan kelompok berisi 1 - 3 orang lalu menghitung ada berapa banyak iterasi yang terjadi.\n\nwhile(orang&gt;0){\n  n = sample(c(1:5),1)\n  orang = orang - n\n  i = i+1\n}\n\nBerapa banyak iterasi (kelompok) yang mungkin muncul:\n\ni\n\n[1] 32",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Memulai dengan __R__</span>"
    ]
  },
  {
    "objectID": "3 part 3.html#regex",
    "href": "3 part 3.html#regex",
    "title": "3  Memulai dengan R",
    "section": "3.5 Regex",
    "text": "3.5 Regex\nRegex adalah kepanjangan dari reguler expression, yakni mencari pattern dari data berupa string. Cheatsheet untuk regex bisa dilihat di sini.\nSelain mengandalkan base dari R, kita juga bisa menggunakan library(stringr).\nSetidaknya ada dua manfaat utama dari regular expression, yakni:\n\nPattern Matching; mencari kecocokan pattern dari suatu data bertipe character.\nReplace Pattern; mencari kecocokan pattern dan mengubahnya dari suatu data bertipe character.\n\nPerbedaan cara penulisan (kapital atau lower) bisa kita pertimbangkan untuk dijadikan syarat pencarian atau tidak, yakni dengan penambahan ignore.case = T atau ignore.case = F.\nBerikut ini adalah syntaxes yang ada dan digunakan untuk mencari apa:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.5.1 Pattern Matching\nSebagai contoh, saya akan gunakan data berikut ini:\nVariabel string yang diketahui:\n\nstring = c('Market Research','market riset','survey','responden','mickey mouse')\n\nBerikut pattern yang diinginkan:\n\npattern = 'm..ke'\n\nBerikut adalah beberapa fungsi yang sering digunakan.\n\nFunction grep()\n\nPerhatikan output dari masing-masing perintah sebagai berikut:\n\ngrep(pattern,string)\n\n[1] 2 5\n\n\nOutput function ini adalah nomor urut / elemen dari vector yang sesuai dengan pattern yang diinginkan.\n\ngrep(pattern,string,value = T)\n\n[1] \"market riset\" \"mickey mouse\"\n\n\nOutput function ini adalah isi elemen dari vector yang sesuai dengan pattern yang diinginkan.\n\ngrep(pattern,string,ignore.case = T)\n\n[1] 1 2 5\n\n\nOutput function ini adalah isi elemen dari vector yang sesuai dengan pattern yang diinginkan dengan menghiraukan uppercase atau lowercase.\n\nFunction grepl()\n\nOutput dari fungsi ini berupa logic (boolean):\n\ngrepl(pattern,string,ignore.case = T)\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n\n\nFunction menggunakan stringr:: dan fungsi str_detect()\n\nOutput dari fungsi ini berupa logic (boolean):\n\nstringr::str_detect(string,pattern)\n\n[1] FALSE  TRUE FALSE FALSE  TRUE\n\n\n\nFunction menggunakan stringr:: dan fungsi str_locate()\n\nFind starting and end position of all matches.\n\nstringr::str_locate(string, pattern)\n\n     start end\n[1,]    NA  NA\n[2,]     1   5\n[3,]    NA  NA\n[4,]    NA  NA\n[5,]     1   5\n\n\n\nFunction menggunakan stringr:: dan fungsi str_extract()\n\nExtract first match.\n\nstringr::str_extract(string, pattern)\n\n[1] NA      \"marke\" NA      NA      \"micke\"\n\n\n\n\n3.5.2 Replace Pattern\nKita akan gunakan contoh data berikut ini:\nIni adalah string yang digunakan:\n\nstring = c(\"This is a sentence about axis\",\n           \"A second pattern is also listed here\")\n\nBerikut adalah pattern dan replacement yang hendak dilakukan:\n\npattern = 'is'\nreplace = 'XY'\n\nBerikut adalah beberapa fungsi yang sering digunakan:\nfunction sub()\n\nsub(pattern, replace, string)\n\n[1] \"ThXY is a sentence about axis\"       \n[2] \"A second pattern XY also listed here\"\n\nsub(pattern, replace, string, ignore.case = T)\n\n[1] \"ThXY is a sentence about axis\"       \n[2] \"A second pattern XY also listed here\"\n\n\nfunction gsub()\n\ngsub(pattern, replace, string)\n\n[1] \"ThXY XY a sentence about axXY\"       \n[2] \"A second pattern XY also lXYted here\"\n\ngsub(pattern, replace, string, ignore.case = T)\n\n[1] \"ThXY XY a sentence about axXY\"       \n[2] \"A second pattern XY also lXYted here\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Memulai dengan __R__</span>"
    ]
  },
  {
    "objectID": "3 part 4.html",
    "href": "3 part 4.html",
    "title": "4  Membuat function di R.",
    "section": "",
    "text": "4.1 function() tanpa entry variable\nAda kalanya kita membuat function() tanpa ada entry variable. Lho kok gitu?\nSebagai contoh, kita akan membuat function() yang akan men- generate nama orang, umur, tinggi, dan berat badan:\ndemografi = function(){\n  nama = randomNames::randomNames(1)\n  umur = sample(c(20:60),1)\n  tinggi = rnorm(1,mean = 150, sd = 20)\n  tinggi = round(tinggi,1)\n  berat = rnorm(1,mean = 40, sd = 5)\n  berat = round(berat,1)\n  data = c(nama,umur,tinggi,berat)\n  return(data)\n}\ndemografi()\n\n[1] \"Rector, Josephine\" \"60\"                \"152.4\"            \n[4] \"36.5\"",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Membuat _function_ di __R__.</span>"
    ]
  },
  {
    "objectID": "3 part 4.html#function-tanpa-entry-variable",
    "href": "3 part 4.html#function-tanpa-entry-variable",
    "title": "4  Membuat function di R.",
    "section": "",
    "text": "Tergantung dari kebutuhan kita yah.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Membuat _function_ di __R__.</span>"
    ]
  },
  {
    "objectID": "3 part 4.html#function-dengan-entry-variable",
    "href": "3 part 4.html#function-dengan-entry-variable",
    "title": "4  Membuat function di R.",
    "section": "4.2 function() dengan entry variable",
    "text": "4.2 function() dengan entry variable\nEntry variable yang digunakan bisa berbentuk macam-macam dan bisa lebih dari satu.\nContoh, kita akan membuat function() untuk mencari modus dari sebuah vector:\n\nmodus = function(x) {\n  ux = unique(x)\n  tab = tabulate(match(x, ux))\n  ux[tab == max(tab)]\n}\n\nMari kita cek apakah function-nya berhasil atau tidak:\n\nnama = c('a','b','a','c','d')\nmodus(nama)\n\n[1] \"a\"\n\n\nContoh berikutnya kita akan buat function() untuk menghitung rumus pitagoras dengan dua entry variables, yakni a dan b sebagai berikut:\nIni adalah rumusnya:\n\npytagoras = function(a,b){\n  sqrt((a^2) + (b^2))\n}\n\nMari kita hitung pitagoras dengan a = 3 dan b = 4, yakni:\n\npytagoras(3,4)\n\n[1] 5",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Membuat _function_ di __R__.</span>"
    ]
  },
  {
    "objectID": "3 part 4.html#kelebihan-menggunakan-function",
    "href": "3 part 4.html#kelebihan-menggunakan-function",
    "title": "4  Membuat function di R.",
    "section": "4.3 Kelebihan Menggunakan function",
    "text": "4.3 Kelebihan Menggunakan function\nSalah satu kelebihan penggunaan function adalah kita bisa mengaplikasikannya ke dalam parallel computing dengan library(parallel). Namun parallel computing menggunakan R hanya bisa dilakukan dengan sistem operasi komputer Linux.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Membuat _function_ di __R__.</span>"
    ]
  },
  {
    "objectID": "3 part 5.html",
    "href": "3 part 5.html",
    "title": "5  Membaca Data dari Excel",
    "section": "",
    "text": "5.1 Membaca Data dari Format File Lain\nR memiliki kemampuan untuk membaca data dalam format lain seperti csv, sav (SPSS), txt, dan lainnya. Secara default, R bisa membaca file dalam bentuk csv dan txt tanpa menggunakan library() lainnya.\nGunakan fungsi read.csv() untuk membaca file csv dan readLines() untuk file txt.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Membaca Data dari __Excel__</span>"
    ]
  },
  {
    "objectID": "3 part 5.html#membuat-data-sintetis-untuk-keperluan-training",
    "href": "3 part 5.html#membuat-data-sintetis-untuk-keperluan-training",
    "title": "5  Membaca Data dari Excel",
    "section": "5.2 Membuat Data Sintetis untuk Keperluan Training",
    "text": "5.2 Membuat Data Sintetis untuk Keperluan Training\nUntuk keperluan training ini, kita akan membuat satu dataset sintetis yang kemudian kita akan jadikan contoh pada bagian data carpentry.\n\n5.2.1 Contoh Data\nDataset ini akan berisi data hasil survey dengan variabel-variabel berikut:\n\nid_responden.\ngender: jenis kelamin responden.\nusia: usia responden",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Membaca Data dari __Excel__</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "6  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2\n\n\nKnuth (1984)\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]