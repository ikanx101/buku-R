# Memulai dengan __R__

Oke, kita akan memulai bekerja dengan __R__, dimulai dari fungsi-fungsi awal sebagai berikut:

## Fungsi Awal

### Pendefinisian _object_

Setiap data yang akan kita masukkan ke dalam memori __R__, akan saya sebut sebagai _object_. Setiap _object_ yang ingin dimasukkan ke dalam memori perlu didefinisikan terlebih dahulu menggunakan perintah `=` atau `<-`.

Contoh:

Jika saya ingin mendefinisikan dua buah _objects_, yakni `a` dan `b` sebagai berikut:
```{r}
a = 6
b <- 8
```

Maka: 

```{r}
a
b
```

### Operasi Aritmatika dan Matematika

Setiap _object_ yang sudah masuk ke dalam memori __R__ sudah bisa dilakukan analisa atau dilakukan operasi aritmatika: `+`, `-`, `/`, dan `*` ATAU diberikan fungsi matematika seperti __trigonometri__, __logaritmik__, dan lain-lain.

Pada _section_ `3.1.1` kita telah mendefinisikan _objects_ `a` dan `b`, maka kita bisa lakukan perintah sebagai berikut:

```{r}
a + b
a / b
c = a * b
c
sin(c)
log(a+b/c)
```

### Operasi Relasi dan _Logical_ (_Boolean_)

Pada _section_ `1.5` poin 3, kita telah mengetahui operator relasi seperti `==`, `>`, `<`, `<=`, `>=`, dan `!=`. Hasil dari operator relasi ini adalah _logical value_ (__TRUE__ atau __FALSE__).

_Logical value_ yang dihasilkan memiliki sifat sebagai berikut:

1. `TRUE`, berarti __benar__. Bisa disingkat menjadi `T`. Tidak bisa ditulis dalam huruf kecil (harus kapital).
2. `FALSE`, berarti __salah__. Bisa disingkat menjadi `F`. Tidak bisa ditulis dalam huruf kecil (harus kapital).

_Operator logical_ yang biasa digunakan di __R__ antara lain:

1. `&` menandakan __AND__
2. `|` menandakan __OR__
3. `!` menandakan __NOT__

Contoh:

Misalkan saya memiliki dua pernyataan sebagai berikut:

```{r}
pernyataan_1 = T
pernyataan_2 = F
```

Maka:

```{r}
!pernyataan_1
pernyataan_1 & pernyataan_2
pernyataan_1 | pernyataan_2
```

### _If Conditional_

Mungkin teman-teman bertanya-tanya:

> Apa sih gunanya _logical value_ dan _logical operator_?
_Logical value_ merupakan unsur utama saat kita hendak membuat fungsi _conditional_ dan _looping_. Masih ingat fungsi di __Ms. Excel__ untuk membuat _conditional_? _Nah_, mirip pengerjaannya di __R__.

Setidaknya ada tiga fungsi _conditional_ di __R__, yakni:

1. `ifelse()`: bawaan dari _package_ `base`.
2. `if_else()`: fungsi dari _package_ `dplyr` (perlu di- _install_ dulu _package_-nya).
3. `case_when()`: fungsi dari _package_ `dplyr` (perlu di- _install_ dulu _package_-nya).

Apa perbedaan ketiganya?

`ifelse()` dengan `if_else()` berdasarkan pengalaman saya tidak ada perbedaannya. Selama ini saya cukup memilih salah satu saja.

Sedangkan `case_when()` digunakan bersamaan dengan _pipe_ `%>%` pada saat _tidying data_. Berguna saat kita hendak mem- _vector_-kan _conditional_.

> Masih bingung?
Saya akan bahas fungsi `ifelse()` dulu _yah_. Pembahasan mengenai `case_when()` akan saya jelaskan pada _section_ khusus mengenai `tidyverse`.

Contoh paling mudah untuk _conditional_ seperti ini:

Misalkan saya memiliki dua buah _objects_, yakni `a` dan `b`.

```{r}
a = 10
b = 10 + sin(pi/3)
```

Maka:

```{r}
ifelse(a < b, 'hari ini cerah','hari ini mendung')
ifelse(a == b, 'sama-sama','tidak bersama')
```

## Bekerja dengan data

Pada _section_ `2.1.2` telah dijelaskan beberapa struktur data di __R__, sekarang kita akan melihat bagaimana bentuk _real_-nya di __R__.

Untuk data berbentuk `list`, akan saya jelaskan sekalian bersamaan dengan materi `tidyverse` _yah_.

### _Single Value_

Contoh:

```{r}
a = 100
x = 50
z = 'Indonesia'
```

### _Vector_

_Vector_ didefinisikan dengan menggunakan perintah `c()`; merupakan

Contoh:

```{r}
tinggi_badan = c(164,149,180,184,153,90,139,199,186,158,197)
tinggi_badan
```

#### Elemen _Vector_

Ada yang sadar _gak_ dengan tanda `[1]` setiap kali kita _running_ suatu skrip di __R__.

Apa _sih_ artinya?

Itu adalah tanda posisi pertama dari _vector_. Tanda `[]` digunakan untuk memanggil isi _vector_ di posisi tertentu. Istilah kerennya adalah _subset_ dari suatu _vector_.

Contoh:

```{r}
tinggi_badan[1]
tinggi_badan[7]
tinggi_badan[10]
tinggi_badan[3:5]
tinggi_badan[c(1,7,10)]
tinggi_badan[-c(1,7,10)] #pengecualian
```

#### Operasi Aritmatika Pada _Vector_

_Vector_ yang berupa numerik bisa dilakukan operasi aritmatik.

Contoh:

```{r}
status = (tinggi_badan - 100)/50
status
```

#### Fungsi Pada _Vector_

_Vector_ berupa numerik juga bisa dikenakan fungsi perhitungan seperti:

```{r}
max(tinggi_badan) # memperoleh nilai maksimum x
min(tinggi_badan) # memperoleh nilai minimum x
range(tinggi_badan) # memperoleh range vektor x
length(tinggi_badan) # memperoleh jumlah vektor x
sum(tinggi_badan) # memperoleh total penjumlahan vektor x
mean(tinggi_badan) # memperoleh nilai mean vektor x
sd(tinggi_badan) # standar deviasi vektor x
var(tinggi_badan) # varian vektor x
sort(tinggi_badan) # mengurutkan elemen vektor x dari yang terbesar
```

#### _Generating Sequences_

_Sequences_ atau deret bisa kita bangun menggunakan __R__ dengan dua cara:

1. Menggunakan `:`.
2. Menggunakan fungsi `seq()`.

Contoh:

```{r}
nomor_1 = c(1:10)
nomor_1
# perintah untuk menghitun gcumulative sum
cumsum(nomor_1)
nomor_2 = seq(1,10,0.4) # generating sequence dari 1 hingga 10 dengan jeda 0.4
nomor_2
```

> Apa sih gunanya deret?
Percayalah, suatu saat nanti deret bisa digunakan untuk membantu perhitungan atau analisa kita. Seolah-olah berperan sebagai __katalis__ pada reaksi kimia.


#### _Random sampling_ dari suatu _vector_

Ada suatu masa saat kita membutuhkan untuk mengambil sampel (mengambil subset) dari suatu _vector_ secara acak. Kita bisa menggunakan fungsi `sample()`.

Contoh:

Kita memiliki data variabel `nama_orang` berisi 20 nama orang. Kita hanya ingin memilih 3 nama orang saja secara acak. Bagaimana caranya?

```{r}
nama_orang = randomNames::randomNames(20)
nama_orang
sample(nama_orang,3,replace = F)
```

`replace = F` digunakan saat kita tidak ingin ada pemilihan yang berulang. Sedangkan `replace = T` digunakan saat diperbolehkan hasil pemilihan berulang. Coba _run_ sendiri _yah_.

Perintah `sample()` ini akan sangat berguna saat kita hendak menggunakan prinsip simulasi [__Monte Carlo__](https://ikanx101.github.io/tags/#monte-carlo).

#### _Repeat_ 

Adakalanya kita hendak melakukan pengulangan yang simpel. _Instead of using looping_, kita bisa menggunakan perintah `rep()`. Misalkan:

```{r}
rep('belajar R',3)
rep(c(4:8),10)
tinggi_badan = c(120,132,142,90)
rep(mean(tinggi_badan),4)
```

Jadi perintah `rep()` tidak hanya bisa untuk mengulang suatu single variabel atau _vector_ saja tapi bisa digunakan untuk mengulang suatu fungsi.

Apa perbedaan dengan fungsi `repeat()`? Fungsi `repeat()` biasanya digunakan dalam _looping_ dan baru akan berhenti saat diberikan perintah `break`.

### _Tibble_ atau _Data Frame_

_Tibble_ atau _data frame_ adalah struktur data di __R__ berupa tabel. Analogi sederhananya adalah mirip dengan tabel di __Ms. Excel__ _files_.

_Data frame_ bisa dibentuk dari beberapa _vector_ yang memiliki `length()` yang sama. Contohnya berikut ini:

Kita akan membuat _data frame_ dari `4` buah _vector_, yakni: `id`, `nama`, dan `tinggi_badan`.

```{r}
id = c(1:10)
nama = randomNames::randomNames(10,gender = 0,which.names = 'first')
tinggi_badan = sample(c(150:199),10,replace = F)
absensi = data.frame(id,nama,tinggi_badan)
```

Hasilnya seperti ini:

```{r}
absensi
```

Bentuk _data frame_ kelak akan menjadi primadona dalam setiap analisa yang digunakan di __R__. Nanti saat kita belajar _data carpentry_ menggunakan `tidyverse`, struktur _data frame_ mudah dimanipulasi dengan _piping operator_: `%>%`.

### _Missing values_ `NA`

_Missing values_ adalah suatu nilai yang kosong pada suatu data. Kosong berarti tidak berisi data apapun. Bedakan dengan nilai `0` yah!

> `NA` tidak akan diikutsertakan dalam perhitungan sedangkan `0` diikutsertakan. 
Di __R__, nilai `NA` pada data numerik akan membuat _error_ setiap kali dihitung.

Contoh:

```{r}
data_1 = c(3,5,0,6,8,3)
mean(data_1)
```

Berikut adalah contoh saat ada data berisi `NA`, maka data tersebut tidak akan bisa dihitung:

```{r}
data_2 = c(3,5,NA,6,8,3)
mean(data_2)
```

Bagaimana cara mengecek keberadaan `NA` di data kita?

Kita bisa menggunakan fungsi `is.na()`. _Output_ dari fungsi ini adalah _boolean variable_ berupa `TRUE` atau `FALSE`.

Contoh: mengecek apakah ada `NA` di `data_2`.

```{r}
is.na(data_2)
```

Contoh: membuat tabulasi dari _function_ `is.na()`.

```{r}
table(is.na(data_2))
```

Contoh: menghitung seberapa banyak yang `TRUE`.

```{r}
sum(is.na(data_2))
```

Contoh: mengecek apakah ada data yang __TIDAK__ `NA` di `data_2`.

```{r}
!is.na(data_2)
```

## Beberapa Fungsi yang Berguna

### _Paste_

> Apakah kalian mengetahui fungsi bernama __CONCATENATE__ di __Ms. Excel__?
Fungsi `paste()` mirip penggunaannya dengan perintah __CONCATENATE__, yakni menggabungkan beberapa data menjadi satu.

Contoh: membuat _vector_ berisi `nama_toko` yang berisi urutan nama toko.

```{r}
nama_toko = paste('toko ke',c(1:10),sep='-')
nama_toko
```

Contoh: membuat _vector_ dari `nama_toko` yang sudah pernah dibuat sebelumnya dengan _rules_ `5` toko pertama dari Bandung dan `5` toko selanjutnya dari Bekasi.

```{r}
nama_toko = paste(nama_toko,rep(c('Bandung','Bekasi'),5))
nama_toko
```

`sep = ` berguna untuk mendefinisikan _separator_ apa yang hendak digunakan. Secara _default_, _separator_ yang digunakan adalah spasi.

Coba kalian ganti sendiri bagian _separator_-nya.

Selain itu, kita uga bisa menggabungkan _vector_ menjadi satu _single object_ sebagai berikut:

```{r}
gabung = paste(nama_toko,collapse = ";")
gabung
```

### _Print_

Fungsi `print()` digunakan untuk menampilkan data ke layar. Biasanya digunakan pada proses _looping_ agar hasil iterasi dapat tampil ke layar.

```{r}
print(nama_toko)
```

### _str_

Fungsi `str()` digunakan untuk melihat tipe dan struktur _object_ yang ada di __R__. Sebagai contoh, kita akan pakai data `absensi` dari _section_ __3.2.3__.

```{r}
str(absensi)
```

Terlihat bahwa data `absensi` memiliki struktur __data.frame__ dengan ada `3` _variables_ dan `10` _observations_ (baris data).

### _Summary_

Fungsi `summary()` digunakan untuk melihat statistik deskriptif dari suatu data (tergantung dari tipe datanya). Contoh:

```{r}
summary(absensi$tinggi_badan)
```

### _Class_

Fungsi `class()` digunakan untuk melihat tipe atau struktur dari suatu data. Mirip dengan fungsi `str()`, tapi tidak sampai menampilkan dengan detail. Contoh:

```{r}
class(absensi)
class(absensi$tinggi_badan)
```

### _View_

Fungsi `View()` (dengan huruf __V__ kapital) digunakan untuk menampilkan `dataset` dalam _pop-up windows_.

## _Looping_

_Looping_ berarti pengulangan namun berbeda dengan _repeat_ yang pernah kita bahas sebelumnya. Ada dua fungsi _looping_ yang biasa digunakan, yakni: `for()` dan `while()`. Keduanya memiliki manfaat yang berbeda.

### _For_

Fungsi `for()` biasa dilakukan untuk melakukan _looping_ dengan syarat iterasi yang didefinisikan terlebih dahulu. Jadi kita sudah mengetahui terlebih dahulu berapa kali kita akan melakukan _looping_. 

Contoh:

```{r}
for(i in 1:10){
  print(paste('pertanyaan ke',i))
}
```

Contoh:

```{r}
for(i in 1:10){
  i = 1/i
  print(round(i,3))
}
```

### _While_

Fungsi `while()` digunakan untuk melakukan _looping_ dengan sampai syarat iterasi terpenuhi. Jadi kita belum mengetahui berapa kali kita akan melakukan _looping_. 

Contoh: misalkan dalam satu ruangan ada `100` orang. Saya akan membagi mereka menjadi kelompok - kelompok berisi `1` sampai `5` orang. Kira - kira ada berapa banyak kelompok yang bisa saya dapatkan? 

Caranya, kita set dulu kondisi awalnya.

```{r}
orang = 100
i = 0 # berapa banyak kelompok? awalnya nol dulu
```

Lalu kita buat iterasi dengan `while()`. Yakni mengurangi secara berkala `100` orang dengan kelompok berisi `1` - `3` orang lalu menghitung ada berapa banyak iterasi yang terjadi.

```{r}
while(orang>0){
  n = sample(c(1:5),1)
  orang = orang - n
  i = i+1
}
```

Berapa banyak iterasi (kelompok) yang mungkin muncul:

```{r}
i
```

## _Regex_

_Regex_ adalah kepanjangan dari _reguler expression_, yakni mencari _pattern_ dari data berupa _string_. _Cheatsheet_ untuk _regex_ bisa dilihat di [sini](https://rstudio.com/wp-content/uploads/2016/09/RegExCheatsheet.pdf).

Selain mengandalkan __base__ dari __R__, kita juga bisa menggunakan `library(stringr)`.

Setidaknya ada dua manfaat utama dari _regular expression_, yakni:

1. _Pattern Matching_; mencari kecocokan _pattern_ dari suatu data bertipe `character`.
2. _Replace Pattern_; mencari kecocokan _pattern_ dan mengubahnya dari suatu data bertipe `character`.

Perbedaan cara penulisan (kapital atau _lower_) bisa kita pertimbangkan untuk dijadikan syarat pencarian atau tidak, yakni dengan penambahan `ignore.case = T` atau `ignore.case = F`.


Berikut ini adalah _syntaxes_ yang ada dan digunakan untuk mencari apa:

```{r out.width = '60%',echo=FALSE}
knitr::include_graphics('regex 1.PNG')
```

```{r out.width = '85%',echo=FALSE}
knitr::include_graphics('regex 2.PNG')
```

### _Pattern Matching_

Sebagai contoh, saya akan gunakan data berikut ini:

Variabel _string_ yang diketahui:
```{r}
string = c('Market Research','market riset','survey','responden','mickey mouse')
```

Berikut _pattern_ yang diinginkan:

```{r}
pattern = 'm..ke'
```

Berikut adalah beberapa fungsi yang sering digunakan.

- _Function_ `grep()`

Perhatikan _output_ dari masing-masing perintah sebagai berikut:

```{r}
grep(pattern,string)
```

_Output_ `function` ini adalah nomor urut / elemen dari _vector_ yang sesuai dengan _pattern_ yang diinginkan.

```{r}
grep(pattern,string,value = T)
```

_Output_ `function` ini adalah isi elemen dari _vector_ yang sesuai dengan _pattern_ yang diinginkan.

```{r}
grep(pattern,string,ignore.case = T)
```

_Output_ `function` ini adalah isi elemen dari _vector_ yang sesuai dengan _pattern_ yang diinginkan dengan menghiraukan _uppercase_ atau _lowercase_.


- _Function_ `grepl()`

_Output_ dari fungsi ini berupa _logic_ (_boolean_):

```{r}
grepl(pattern,string,ignore.case = T)
```

- _Function_ menggunakan `stringr::` dan fungsi `str_detect()`

Output dari fungsi ini berupa _logic_ (_boolean_):

```{r}
stringr::str_detect(string,pattern)
```

- _Function_ menggunakan `stringr::` dan fungsi `str_locate()`

_Find starting and end position of all matches_.

```{r}
stringr::str_locate(string, pattern)
```


- _Function_  menggunakan `stringr::` dan fungsi `str_extract()`

_Extract first match_. 

```{r}
stringr::str_extract(string, pattern)
```

### _Replace Pattern_

Kita akan gunakan contoh data berikut ini:

Ini adalah `string` yang digunakan:

```{r}
string = c("This is a sentence about axis",
           "A second pattern is also listed here")
```

Berikut adalah `pattern` dan `replacement` yang hendak dilakukan:

```{r}
pattern = 'is'
replace = 'XY'
```

Berikut adalah beberapa fungsi yang sering digunakan:

`function` `sub()`

```{r}
sub(pattern, replace, string)
sub(pattern, replace, string, ignore.case = T)
```


`function` `gsub()`

```{r}
gsub(pattern, replace, string)
gsub(pattern, replace, string, ignore.case = T)
```

